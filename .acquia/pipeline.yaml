---
type: default
team: ngc
service: fn-kubexit

# These credentials are defined once and used multiple times
_imagecredentials: &imagecredentials
    secrets:
      - type: vault
        key: AWS_ACCESS_KEY_ID
        value: AWS_ACCESS_KEY_ID
        path: secret/fn-drupal-operator/AWS_ACCESS_KEY_ID
      - type: vault
        key: AWS_SECRET_ACCESS_KEY
        value: AWS_SECRET_ACCESS_KEY
        path: secret/fn-drupal-operator/AWS_SECRET_ACCESS_KEY
      - type: vault
        key: AWS_MFA_DEVICE
        value: AWS_MFA_DEVICE
        path: secret/fn-drupal-operator/AWS_MFA_DEVICE
      - type: vault
        key: AWS_MFA_SECRET
        value: AWS_MFA_SECRET
        path: secret/fn-drupal-operator/AWS_MFA_SECRET
      - type: vault
        key: SSH_KEY
        value: GIT_SSH_KEY
        path: secret/pipeline-default/GIT_SSH_KEY

# Validate the formatting of the pipeline.yaml file.
validate_config: true

environment_image:
  file: ".acquia/Dockerfile.ci"
  context: "."
  build_args:
    - secrets:
        - type: vault
          key: SSH_KEY
          value: GIT_SSH_KEY
          path: secret/pipeline-default/GIT_SSH_KEY

pre_build:
  security_composition_analysis:
    required: false
    language:
    - go
  clone_source_image:
  - steps:
    - | 
      export KUBEXIT_VERSION=v0.3.2
      git clone --depth 1 --branch "${KUBEXIT_VERSION}" https://github.com/karlkfi/kubexit.git mirror
      cd mirror
      git apply --reject --whitespace=fix ../patches/*.patch
      sed -i '1 i\ARG REPO_LOCATION' Dockerfile
      sed -i 's#golang:1.18-alpine3.15#${REPO_LOCATION}golang:1.18-alpine3.15#' Dockerfile
      sed -i 's#FROM alpine:3.15#FROM ${REPO_LOCATION}alpine:3.15#' Dockerfile
      sed -i 's#COPY . /build/#COPY mirror /build/#' Dockerfile
      export GOOS=linux GO111MODULE=auto CGO_ENABLED=0 ARCH="amd64" OS="linux"
      cat Dockerfile

build:
  service_image:
      - name: 'fn-kubexit'
        file: 'mirror/Dockerfile'
        context: '.'
        build_args:
          - *imagecredentials
# TODO: Should we enable security_scan?
# This step performs container image security scan in Jfrog Xray via Artifactory
# Build will fail whenever a vulnerability is found unless set to true.
security_scan:
  ignore_failures: true

post_build:
  dev:
    integration_tests:
    - steps:
      - |
        echo "Testing fn-kubexit"
        echo "${JFROG_READONLY}"| docker login ${REPO_LOCATION} -u devops.readonly --password-stdin
        docker run --name fn-kubexit-test --entrypoint "kubexit" -e KUBEXIT_NAME=test-kubexit ${REPO_LOCATION}fn-kubexit:${GIT_COMMIT} sh
        if ! (docker logs fn-kubexit-test 2>&1 | grep "Updating tombstone")
        then
           echo "Did not find the expected text 'Updating tombstone' in the following output: $(docker logs fn-kubexit-test)"
           exit 1
        fi
        docker rm fn-kubexit-test
      args: -v /var/run/docker.sock:/var/run/docker.sock --net=host
      secrets:
        - type: vault
          key: JFROG_READONLY
          value: JFROG_READONLY
          path: secret/pipeline-default/JFROG_READONLY

deploy:
  - component: custom
    dev:
      - steps:
          - echo Required for jfrog artifact promotion.
    staging:
      - steps:
          - echo Required for jfrog artifact promotion.

notify:
  channel: proj-ngc
  on_success: change
  on_failure: always
